name: Import GPG key
description: Import GPG key
inputs:
  private-key:
    description: GPG private key in ASCII armor format
    required: true
  passphrase:
    description: Passhrase for the given key
    required: true
runs:
  using: composite
  steps:
    - name: GPG version
      shell: bash
      run: gpg --version
    - name: Import key to GPG
      shell: bash
      run: |
        echo -e "${{ inputs.private-key }}" | gpg --import --batch --yes -
    - name: Configure GPG
      shell: bash
      run: |
        echo -e "default-cache-ttl 7200\nmax-cache-ttl 31536000\nallow-preset-passphrase" >> "${HOME}/.gnupg/gpg-agent.conf"
        gpg-connect-agent RELOADAGENT /bye
        cat "${HOME}/.gnupg/gpg-agent.conf"
    # TODO: Remove when test is complete
    - name: Get info from key
      shell: bash
      run: |
        gpg -K --with-keygrip
    - name: Extract variables from key
      shell: bash
      run: |
        echo "KEYGRIP_SECRET=$(gpg -K --with-colons --with-keygrip | grep grp | head -1 | tr -d 'grp:')" >> $GITHUB_ENV
        echo "KEYGRIP_PUBLIC=$(gpg -K --with-colons --with-keygrip | grep grp | tail -1 | tr -d 'grp:')" >> $GITHUB_ENV
        echo "KEY_FP=$(gpg -K --with-colons | grep fpr | head -1 | tr -d 'fpr:')" >> $GITHUB_ENV
        echo "KEY_ID=$(gpg -K --with-colons | grep fpr | head -1 | tr -d 'fpr:\n' | tail -c 16)" >> $GITHUB_ENV
        echo "KEY_USER=$(gpg -K --with-colons | grep uid | awk -F: '{ print $10 }' | grep -o '^[^<]*' | awk '{$1=$1};1')" >> $GITHUB_ENV
        echo "KEY_EMAIL=$(gpg -K --with-colons | grep uid | grep -Eo '<[^>]*' | tr -d '<')" >> $GITHUB_ENV
    - name: Preset passphrase
      shell: bash
      run: |
        HEX_PASSPHRASE=$(echo -n ${{ inputs.passphrase }} | od -An -tx1 | tr -d ' \n' | tr 'a-f' 'A-F')
        gpg-connect-agent "PRESET_PASSPHRASE ${KEYGRIP_SECRET} -1 ${HEX_PASSPHRASE}" /bye
        gpg-connect-agent "PRESET_PASSPHRASE ${KEYGRIP_PUBLIC} -1 ${HEX_PASSPHRASE}" /bye
        gpg-connect-agent "KEYINFO --list" /bye
    # TODO: Remove when test is complete
    - name: GPG sign and verify
      shell: bash
      run: echo "Hej" | gpg --armor --sign -u ${KEY_FP} | gpg --verify
    - name: Configure git
      shell: bash
      run: |
          git config user.name "${KEY_USER}"
          git config user.email ${KEY_EMAIL}
          git config user.signingkey ${KEY_ID}
          git config commit.gpgsign true
    # TODO: Remove when test is complete
    - name: Debug git
      shell: bash
      run: git config --list
